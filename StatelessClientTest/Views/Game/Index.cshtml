
@{
    ViewData["Title"] = "Game Page";
}

<div class="hflex" id="container">
    <div class="flex vflex">
        <div class="flex"></div>
        <div>
            <h2 id="score-display" class="counter-text">Score: 0</h2>
        </div>
        <div class="flex"></div>
        <div>
            <h2 id="death-display" class="counter-text">Deaths: 0</h2>
        </div>
        <div class="flex"></div>
        <div class="hflex">
            <div class="flex"></div>
            <div>
                <input type="button" value="Revive" id="revive-button" disabled />
            </div>
            <div class="flex"></div>
        </div>
        <div class="flex"></div>
    </div>
    <div class="thin-spacer"></div>
    <div class="vflex">
        <div class="flex"></div>
        <div>
            <canvas id="game-window" width="500" height="500"></canvas>
        </div>
        <div class="flex"></div>
    </div>
    <div class="thin-spacer"></div>
    <div class="flex vflex">
        <div class="flex"></div>
        <div class="flex4 hflex">
            <div class="flex"></div>
            <div id="player-table-container"></div>
            <div class="flex"></div>
        </div>
        <div class="flex"></div>
        <div class="hflex">
            <div class="flex"></div>
            <div>
                <input type="button" value="Quit" id="quit-button" />
            </div>
            <div class="flex"></div>
        </div>
        <div class="flex"></div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">

        const keybinds = {
            "KeyW": "up",
            "ArrowUp": "up",
            "KeyS": "down",
            "ArrowDown": "down",
            "KeyA": "left",
            "ArrowLeft": "left",
            "KeyD": "right",
            "ArrowRight": "right",
            "ShiftLeft": "sprinting",
            "ShiftRight": "sprinting",
            "ControlLeft": "sneaking",
            "ControlRight": "sneaking"
        };

        $(async () => {

            function toCanvasScale(val) {
                return toCanvasSpace({ x: val, y: 0 }).x;
            }
            
            function toCanvasSpace(pos) {
                return {
                    x: pos.x * (canv.width / play_area.x),
                    y: canv.height - pos.y * (canv.height / play_area.y)
                };
            }

            function toGameSpace(pos) {
                return {
                    x: pos.x * (play_area.x / canv.width),
                    y: play_area.y - pos.y * (play_area.y / canv.height)
                };
            }

            function addVec(vec1, vec2) {
                return {
                    x: vec1.x + vec2.x,
                    y: vec1.y + vec2.y
                };
            }

            function scaleVec(vec, scalar) {
                return {
                    x: vec.x * scalar,
                    y: vec.y * scalar
                };
            }

            function subVec(vec1, vec2) {
                return addVec(vec1, scaleVec(vec2, -1));
            }
            
            var connection = new signalR.HubConnectionBuilder().withUrl("/conhub").build();
            await connection.start();
            
            const canv = $("#game-window")[0];
            const pen = canv.getContext("2d");
            const play_area = await connection.invoke("GetPlayAreaDimensions");
            const id = await connection.invoke("GetId");

            let last_timestamp = 0;
            var control_state = {};
            var keypresses = {};
            var reverse_binds = {}

            for (var code in keybinds) {
                var control = keybinds[code];
                keypresses[code] = false;
                control_state[control] = false;
                reverse_binds[control] = (reverse_binds[control] || []).concat([code]);
            }

            function drawPlayer(player) {
                let pos = toCanvasSpace(player.position);
                let radius = toCanvasScale(player.radius);

                pen.beginPath();
                if (player.defeated) {
                    pen.moveTo(pos.x - radius, pos.y - radius);
                    pen.lineTo(pos.x + radius, pos.y + radius);
                    pen.moveTo(pos.x + radius, pos.y - radius);
                    pen.lineTo(pos.x - radius, pos.y + radius);
                    pen.strokeStyle = "#000";
                    pen.stroke();
                } else {
                    pen.arc(pos.x, pos.y, radius, 0, Math.PI * 2);
                    pen.fillStyle = "#000";
                    pen.fill();
                }

                pen.font = '8pt Arial';
                pen.fillStyle = "#000";
                pen.fillText(player.name, pos.x - (pen.measureText(player.name).width / 2), pos.y - radius - 6);

                if (player.id === id) {
                    $("#score-display").html(`Score: ${player.score}`);
                    $("#death-display").html(`Deaths: ${player.deaths}`);
                    $("#revive-button").prop("disabled", !player.defeated);
                }
            }

            function drawProjectile(projectile) {
                let radius = toCanvasScale(projectile.radius);
                let length = projectile.speed * projectile.radius;
                let a = toCanvasSpace(subVec(projectile.position, scaleVec(projectile.direction, length)));
                let b = toCanvasSpace(addVec(projectile.position, scaleVec(projectile.direction, length)));

                pen.beginPath()
                pen.moveTo(a.x, a.y);
                pen.lineTo(b.x, b.y);
                pen.strokeStyle = "#800";
                pen.stroke();
            }

            function renderPlayerTable(playerList) {
                var table = `
                    <table>
                        <tr>
                            <th>Player</th>
                            <th>Score</th>
                            <th>Deaths</th>
                        </tr>`;
                for (var entity of playerList) {
                    if (entity.entityType === "Player") {
                        table += `
                        <tr>
                            <td>${entity.name}</td>
                            <td>${entity.score}</td>
                            <td>${entity.deaths}</td>
                        </td>`;
                    }
                }
                table += `</table>`;
                $("#player-table-container").html(table);
            }
            
            function updateGameState(gameState) {
                pen.clearRect(0, 0, canv.width, canv.height);

                for (var entity of gameState.entities) {
                    if (entity.entityType === "Player") {
                        drawPlayer(entity);
                    } else if (entity.entityType === "Projectile") {
                        drawProjectile(entity);
                    }
                }

                renderPlayerTable(gameState.entities);
            }

            await connection.invoke("RegisterUser");
            
            connection.on("GameStateReport", ({ timestamp, state }) => {
                if (timestamp > last_timestamp) {
                    last_timestamp = timestamp;
                    updateGameState(state);
                }
            });

            // strange functionality with shift keys; all keyup events for one are swallowed if holding the other down
            // causes an unintended stuck-key bug
            function updateInput(event, is_pressed) {
                if (event.code in keybinds) {
                    event.preventDefault();
                    keypresses[event.code] = is_pressed;
                    var control = keybinds[event.code];
                    old_state = control_state[control]
                    new_state = reverse_binds[control].some(c => keypresses[c])
                    if (old_state != new_state) {
                        control_state[control] = new_state;
                        connection.invoke("UpdateControlState", control_state);
                    }
                }
            }

            $(document).keydown(e => updateInput(e, true));
            $(document).keyup(e => updateInput(e, false));

            $("#game-window").click(e => {
                let aim_target = toGameSpace({ x: e.offsetX, y: e.offsetY });
                connection.invoke("SendProjectile", aim_target);
            });

            $("#revive-button").click(() => {
                connection.invoke("Revive");
            });

            $("#quit-button").click(async () => {
                await connection.invoke("UnregisterUser");
                window.location = "/Home";
            });
            
        });
    </script>
}